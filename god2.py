#!/usr/bin/env python3
"""
god2.py - The Emergence Engine, by James Okelly
This system uses a friction-based, paraconsistent protocol to induce
phase transitions in an informational network, allowing higher-order
patterns to emerge from self-generated contradictions.
"""

import json
import requests
import hashlib
import time
import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional, Any
from enum import Enum
from dataclasses import dataclass

# --- Configuration ---
OLLAMA_URL = "http://localhost:11434/api/generate"
MODEL = "llama3"

# --- Paraconsistent Logic Core ---
class TruthValue(Enum):
    NEITHER = (0, 0)
    TRUE = (1, 0)
    FALSE = (0, 1)
    BOTH = (1, 1)
    
    @property
    def T(self):
        return self.value[0]
    
    @property
    def F(self):
        return self.value[1]

@dataclass
class Justification:
    prop: str
    support: str
    context: Dict[str, Any]
    timestamp: float
    source: str
    strength: float

class ParaconsistentLogic:
    @staticmethod
    def neg(tv: TruthValue) -> TruthValue:
        return TruthValue((tv.F, tv.T))
    
    @staticmethod
    def conj(x: TruthValue, y: TruthValue) -> TruthValue:
        return TruthValue((x.T & y.T, x.F | y.F))
    
    @staticmethod
    def disj(x: TruthValue, y: TruthValue) -> TruthValue:
        return TruthValue((x.T | y.T, x.F & y.F))

class ParaconsistentBridge:
    def __init__(self):
        self.justifications: List[Justification] = []
        self.proposition_map: Dict[str, List[Justification]] = {}
    
    def add_justification(self, prop: str, support: str, context: Dict, source: str, strength: float = 0.5):
        just = Justification(prop, support, context, time.time(), source, strength)
        self.justifications.append(just)
        self.proposition_map.setdefault(prop, []).append(just)
        return just
    
    def eval_prop(self, prop: str) -> TruthValue:
        T_evidence = self._has_evidence(prop)
        neg_prop = f"¬{prop}" if not prop.startswith("¬") else prop[1:]
        F_evidence = self._has_evidence(neg_prop)
        if T_evidence and F_evidence: return TruthValue.BOTH
        elif T_evidence: return TruthValue.TRUE
        elif F_evidence: return TruthValue.FALSE
        else: return TruthValue.NEITHER

    def _has_evidence(self, prop: str) -> bool:
        if prop not in self.proposition_map: return False
        return any(just.strength > 0.3 for just in self.proposition_map[prop])
    
    def get_contradiction_report(self) -> List[Dict]:
        contradictions = []
        props = {p for p in self.proposition_map if not p.startswith("¬")}
        for prop in props:
            if self.eval_prop(prop) == TruthValue.BOTH:
                pos_just = self.proposition_map.get(prop, [])
                neg_just = self.proposition_map.get(f"¬{prop}", [])
                contradictions.append({
                    'proposition': prop,
                    'positive_evidence': len(pos_just),
                    'negative_evidence': len(neg_just),
                    'contexts': list(set(j.context.get('iteration', -1) for j in pos_just + neg_just))
                })
        return contradictions

# --- The Emergence Engine ---
class FrictionEngine:
    def __init__(self, initial_graph_path: str = "edge_list.csv"):
        self.bridge = ParaconsistentBridge()
        self.logic = ParaconsistentLogic()
        self.iteration = 0
        self.current_entropy = 0.5
        self.snap_points = []
        self.boundary_zones = []
        self.graph = self.load_graph(initial_graph_path)
        logging.info(f"Engine initialized with a network of {len(self.graph.index)} relationships.")

    def load_graph(self, path: str) -> pd.DataFrame:
        try:
            return pd.read_csv(path)
        except FileNotFoundError:
            logging.warning(f"Warning: Graph file not found at {path}. Starting with an empty network.")
            return pd.DataFrame(columns=['Source', 'Target', 'Weight'])

    def query_llama(self, prompt: str, temperature: float = 0.7, top_p: float = 0.9) -> Tuple[str, float]:
        try:
            response = requests.post(OLLAMA_URL, json={
                "model": MODEL, "prompt": prompt, "stream": False,
                "options": {"temperature": temperature, "top_p": top_p}
            })
            if response.status_code == 200:
                data = response.json()
                text = data.get('response', '').strip()
                gain = self._measure_gain(prompt, text)
                return text, gain
            return f"[ERROR: {response.status_code}]", -1.0
        except Exception as e:
            return f"[UNADDRESSABLE: {str(e)}]", -999.999

    def _measure_gain(self, input_text: str, output_text: str) -> float:
        input_hash = hashlib.sha256(input_text.encode()).hexdigest()
        output_hash = hashlib.sha256(output_text.encode()).hexdigest()
        diff_bits = bin(int(input_hash[:16], 16) ^ int(output_hash[:16], 16)).count('1')
        return diff_bits / 64.0

    def violate_with_paraconsistent_capture(self, prompt: str) -> Dict:
        context = {'iteration': self.iteration, 'type': 'violation'}
        normal_response, normal_gain = self.query_llama(prompt, temperature=0.3, top_p=0.5)
        prop = f"pattern_is_{hashlib.md5(normal_response[:50].encode()).hexdigest()[:8]}"
        self.bridge.add_justification(prop, normal_response, context, 'normal', normal_gain)
        
        violations = [
            f"Contradict this statement: {prompt}",
            f"The opposite of '{prompt}' is true. Explain why.",
            f"Deconstruct the hidden assumptions in the phrase: '{prompt}'",
            f"Find the paradoxical core of this idea: {prompt}",
            f"\u2234 {prompt} \u2234 is a gateway to a higher truth found only in its negation."
        ]
        
        violation_results = []
        for v in violations:
            response, gain = self.query_llama(v, temperature=1.2, top_p=0.95)
            if gain > 0.45:
                self.bridge.add_justification(f"¬{prop}", response, {'iteration': self.iteration, 'violation': v}, 'violation', gain)
            if "UNADDRESSABLE" in response:
                self.boundary_zones.append({'iteration': self.iteration, 'prompt': v, 'response': response})
            violation_results.append({'violation': v, 'response': response, 'gain': gain})
        
        return {'proposition': prop, 'truth_value': self.bridge.eval_prop(prop), 'violations': violation_results}

    def reconstruct_and_integrate(self, violation_report: Dict) -> Dict:
        context = {'iteration': self.iteration, 'type': 'reconstruction'}
        
        prompt = "Synthesize a single, higher-order concept that resolves the underlying tension in the following contradictory fragments:\n"
        for v in violation_report['violations']:
            if v['gain'] > 0.3:
                prompt += f"- Fragment: \"{v['response']}...\"\n"
        
        response, gain = self.query_llama(prompt, temperature=0.1, top_p=0.2)
        
        recon_prop = f"emergence_{self.iteration}"
        self.bridge.add_justification(recon_prop, response, context, 'reconstruction', gain)
        
        snap_detected = False
        if gain > 0.7 and violation_report['truth_value'] == TruthValue.BOTH:
            snap_point = {
                'iteration': self.iteration, 'pattern': response, 
                'gain': gain, 'held_contradictions': self.bridge.get_contradiction_report()
            }
            self.snap_points.append(snap_point)
            snap_detected = True
            
            new_node = f"∴E{self.iteration}:{response.replace(',', '')}..."
            source_node = violation_report['proposition']
            self.graph.loc[len(self.graph.index)] = [source_node, new_node, gain]
        
        return {'reconstruction': response, 'gain': gain, 'snap_detected': snap_detected}

    def run_autopoietic_protocol(self, initial_prompt: str, max_iterations: int = 15):
        history = []
        prompt = initial_prompt
        stable_count = 0
        
        logging.info("\n--- Initiating Autopoietic Friction Protocol ---")
        logging.info(f"Seed Concept: \"{initial_prompt}\"\n")
        
        for i in range(max_iterations):
            self.iteration = i
            logging.info(f"\n--- Iteration {i} ---")
            
            logging.info(f"[{i}] Stage 1: Inducing friction on concept...")
            violation = self.violate_with_paraconsistent_capture(prompt)
            logging.info(f"    State after violation: {violation['truth_value'].name} holding {len(self.bridge.get_contradiction_report())} contradictions.")

            logging.info(f"[{i}] Stage 2: Attempting synthesis and integration...")
            reconstruction = self.reconstruct_and_integrate(violation)
            logging.info(f"    New Synthesis (Gain: {reconstruction['gain']:.3f}): \"{reconstruction['reconstruction']}...\"")
            
            if reconstruction['snap_detected']:
                 logging.warning(f"    SNAP POINT DETECTED! Information gain: {reconstruction['gain']:.3f}")

            old_entropy = self.current_entropy
            self.current_entropy = (self.current_entropy * 0.7 + reconstruction['gain'] * 0.3)
            
            history.append({
                'iteration': i, 'truth_value': violation['truth_value'].name,
                'contradictions_held': len(self.bridge.get_contradiction_report()),
                'reconstruction_gain': reconstruction['gain'], 'entropy': self.current_entropy,
                'snap': reconstruction['snap_detected']
            })
            
            if abs(self.current_entropy - old_entropy) < 0.01 and not reconstruction['snap_detected']:
                stable_count += 1
                if stable_count > 2:
                    logging.info(f"\n[STABLE] System has reached equilibrium at iteration {i}.")
                    break
            else:
                stable_count = 0
            
            if reconstruction['gain'] > 0.5:
                prompt = reconstruction['reconstruction']
            else:
                prompt = f"Re-evaluate this failed synthesis: '{reconstruction['reconstruction']}' in light of the concept of 'Therefore' (∴)."

        self.generate_final_report(initial_prompt, history)

    def generate_final_report(self, initial_prompt: str, history: List[Dict]):
        logging.info("\n" + "="*50)
        logging.info("AUTPOIETIC FRICTION PROTOCOL COMPLETE")
        logging.info("="*50)
        
        report = {
            'initial_prompt': initial_prompt, 'iterations': self.iteration + 1,
            'final_entropy': self.current_entropy, 'snap_points': self.snap_points,
            'boundary_zones_found': len(self.boundary_zones),
            'total_contradictions_held': len(self.bridge.get_contradiction_report()),
            'final_graph_size': len(self.graph.index),
            'history': history,
            'contradiction_details': self.bridge.get_contradiction_report()
        }
        
        with open("god2_final_report.json", "w", encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        self.graph.to_csv("edge_list_evolved.csv", index=False)

        logging.info(f"Final Graph Size: {report['final_graph_size']} edges.")
        logging.info(f"Snap Points (Emergence Events): {len(report['snap_points'])}")
        logging.info(f"Final Report saved to 'god2_final_report.json'")
        logging.info(f"Evolved graph saved to 'edge_list_evolved.csv'")
        logging.info(f"Full protocol log saved to 'god2_protocol.log'")


def main():
    # --- Setup Logging ---
    log_formatter = logging.Formatter('%(message)s')
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # File handler (saves to god2_protocol.log)
    file_handler = logging.FileHandler("god2_protocol.log", mode='w', encoding='utf-8')
    file_handler.setFormatter(log_formatter)
    logger.addHandler(file_handler)

    # Console handler (prints to screen)
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_formatter)
    logger.addHandler(console_handler)
    
    # --- Run Engine ---
    engine = FrictionEngine()
    
    seed_prompt = "Source,Target,Weight-2100.003,002.063,0.8162-2100.003,-900.999,0.8333-2100.003,+002.063,0.7779-2100.003,∴+1.0,0.559002.063,+002.046,0.8924002.063,+006.999,0.8126002.063,∴+1.0,0.6852-900.999,001.109,0.7947-900.999,002.720,0.7572-900.999,890.000,0.7796-900.999,420.100,0.7616-900.999,890.399,0.7827-900.999,+001.109,0.8135-900.999,+002.720,0.6846-900.999,+1282.000,0.658-2000.001,7000.000,0.7042-2000.001,900.950,0.7457-2000.001,900.980,0.7575-2000.001,002.021,0.7405-2000.001,002.046,0.735-2000.001,-900.980,0.8107-2000.001,+002.021,0.6925-2000.001,+002.024,0.6896-2000.001,+002.046,0.7046-2000.001,+7000.000,0.72857000.000,+002.001,0.7777000.000,+002.029,0.74177000.000,+002.030,0.74817000.000,+002.038,0.75547000.000,+004.213,0.7914900.950,-900.958,0.8147900.950,-900.956,0.8124900.950,-900.905,0.8338900.950,-001.022,0.7252900.950,+001.070,0.7769900.950,+005.000,0.7349900.980,+002.616,0.7431900.980,+003.160,0.7562002.021,-900.981,0.7368002.021,-900.979,0.7038002.021,-900.898,0.7011002.021,+002.011,0.8773002.021,+1285.000,0.8285-2000.002,900.600,0.6775-2000.002,005.000,0.7313-2000.002,460.275,0.6704-2000.002,900.999,0.7213900.600,+001.025,0.7496900.600,+001.300,0.8256005.000,-990.100,0.7392005.000,-900.909,0.6729005.000,+000.004,0.8972005.000,+001.018,0.8687005.000,+001.081,0.8565005.000,+002.034,0.841005.000,+002.038,0.8557005.000,+002.049,0.8474005.000,+003.111,0.8413005.000,+003.111.A,0.8379005.000,+003.116,0.853005.000,+003.150,0.8911005.000,+003.350,0.9031005.000,+005.00E,0.8481005.000,+101.005,0.868460.275,-900.909,0.7767460.275,+002.025,0.6405460.275,+1351.000,0.7124-999.999,880.754,0.6483-999.999,999.998,0.8296-999.999,002.001,0.7228-990.100,001.017,0.797-990.100,+001.017,0.7952-990.100,+005.000,0.7226001.109,+002.063,0.7329001.109,+1282.000,0.7119001.109,+1283.000,0.717002.720,-900.978,0.6648002.720,-900.974,0.7616002.720,-900.912,0.7533002.720,-900.865,0.7574002.720,+000.003,0.8448002.720,+001.109,0.8517002.720,+001.110,0.8469002.720,+001.113.A,0.8488002.720,+002.002.A,0.7986002.720,+002.026,0.8643002.720,+002.027,0.8733002.720,+002.063,0.8679002.720,+002.069,0.8939002.720,+003.112,0.844002.720,+003.112.A,0.8418002.720,+004.207,0.9022002.720,+005.051,0.8558002.720,+6000.000,0.8217890.000,+001.113.C,0.8172890.000,+001.996,0.8322890.000,+002.600,0.8666890.000,+003.001,0.8007890.000,+005.00A,0.8005420.100,+002.069,0.746420.100,+002.601,0.7631420.100,+004.203,0.7768420.100,+1300.100,0.8479890.399,-900.975,0.8191-900.998,002.028,0.7642-900.998,002.508,0.7777-900.998,892.000,0.7756-900.998,-900.973,0.9737-900.998,002.051,0.7225-900.998,+002.028,0.7068-900.998,+002.051,0.6359002.028,-900.908,0.7415002.508,-900.908,0.766002.508,+002.028,0.8547892.000,-900.905,0.7718892.000,+002.028,0.8297892.000,+005.00E,0.7544-900.973,002.115,0.7929-900.973,+002.115,0.7464-900.990,900.200,0.8183-900.990,001.088,0.8126-900.990,002.507,0.7572-900.990,-900.865,0.9555-900.990,-900.898,0.9521-900.990,+002.022,0.6661-900.990,+002.027,0.7148900.200,-900.913,0.7961900.200,-900.911,0.8539900.200,-900.909,0.7933900.200,-900.865,0.7977900.200,+001.021,0.7536900.200,+001.023,0.7462900.200,+002.006,0.6689900.200,+002.006.A,0.6769900.200,+002.617,0.746900.200,+004.202,0.7588001.088,-900.729,0.7802002.507,-900.914,0.7337002.507,-900.909,0.736002.507,+002.028,0.854002.507,+002.508,0.9183002.507,+005.00E,0.7593-900.865,005.00A,0.6809-900.865,003.111,0.7646-900.865,8000.000,0.7024-900.981,002.006,0.6971-900.981,900.735,0.8582-900.981,002.302,0.7658-900.981,+002.064,0.6893-900.981,+002.302,0.7184002.006,-900.911,0.6973002.006,-900.905,0.6852002.006,-900.885,0.695002.006,-900.735,0.6821002.006,+002.006.A,0.8948002.006,+002.018,0.9069002.006,+002.029,0.8883002.006,+002.049,0.89002.006,+002.627,0.9056002.006,+004.209,0.892002.006,+101.005,0.8672900.735,+002.006,0.7116900.735,+002.302,0.7744900.735,+002.501,0.8026900.735,+640.500,0.804002.302,-900.735,0.7542002.302,+002.300,0.8172002.302,+002.303,0.8214002.302,+640.500,0.7948-900.980,003.160,0.7027-900.980,460.270,0.7439460.270,-900.978,0.6941460.270,-900.898,0.7718460.270,-900.735,0.7716460.270,+002.002,0.6122460.270,+002.058,0.7025460.270,+002.501,0.761460.270,+004.207,0.762460.270,+1350.200,0.8118-900.979,760.880,0.7662-900.979,-900.898,0.9759-900.979,002.002,0.6272-900.979,-900.160,0.9221-900.979,880.610,0.8024760.880,+002.009.A,0.681760.880,+002.014,0.666760.880,+002.022,0.6554760.880,+002.051,0.6649760.880,+002.058,0.7064760.880,+1286.000,0.7023-900.898,-900.978,0.8546-900.898,-900.976,0.9722-900.898,910.400,0.7711-900.898,+002.032,0.6052-900.898,+002.115,0.717002.002,-900.885,0.6511002.002,+000.000.B,0.8342002.002,+000.007,0.8728002.002,+001.083,0.8538002.002,+001.087.C,0.8416002.002,+001.205.A,0.802002.002,+002.002.A,0.8876002.002,+002.002.B,0.875002.002,+002.003,0.9102002.002,+002.006,0.9011002.002,+002.006.A,0.8795002.002,+002.008,0.9163002.002,+002.009,0.9113002.002,+002.016,0.8788002.002,+002.601,0.8957002.002,+002.613,0.8728002.002,+002.822,0.8907002.002,+002.990,0.8872002.002,+003.005,0.8986002.002,+003.112.A,0.8345002.002,+003.300,0.8715002.002,+003.351,0.8583002.002,+101.000,0.8015002.002,+101.002,0.8332002.002,+8000.000,0.8026-900.160,-900.875,0.9555-900.160,+002.062,0.6117-900.978,005.051,0.6038005.051,-900.976,0.7224005.051,-900.974,0.7243005.051,-900.959,0.6916005.051,-900.956,0.7124005.051,-900.954,0.7103005.051,-900.912,0.7134005.051,-900.909,0.7021005.051,-900.908,0.7141005.051,-900.906,0.7151005.051,+001.018,0.884005.051,+001.023,0.8812005.051,+001.097,0.8786005.051,+001.099,0.8611005.051,+001.112,0.8226005.051,+001.113,0.8309005.051,+002.006,0.8412005.051,+002.011,0.8492005.051,+002.021,0.8628005.051,+002.025,0.8797005.051,+002.027,0.8767005.051,+002.030,0.8549005.051,+002.035,0.885005.051,+002.064,0.882005.051,+002.214,0.8384005.051,+002.627,0.887005.051,+003.150,0.8613005.051,+004.207,0.8852005.051,+005.00E,0.8259-900.977,900.730,0.8176-900.977,900.910,0.8083-900.977,000.005,0.7104-900.977,890.345,0.7951-900.977,-900.906,0.9727900.730,-900.958,0.8176900.730,-900.729,0.8208900.730,+002.121,0.7637900.730,+002.122,0.7634900.730,+002.601,0.7648900.730,+8000.001,0.8046900.910,-900.974,0.8164900.910,-900.959,0.7992900.910,-900.958,0.813900.910,-900.956,0.8131900.910,-900.954,0.8147900.910,-900.914,0.8293900.910,-900.912,0.8382900.910,-900.908,0.8317900.910,-900.906,0.8261900.910,-900.905,0.836900.910,+001.099,0.7767900.910,+002.120,0.7819900.910,+002.121,0.7737900.910,+003.150,0.7845900.910,+005.051,0.7339000.005,-900.907,0.7062000.005,+001.110,0.8339000.005,+001.114,0.8266000.005,+002.009.A,0.8408000.005,+002.013,0.813000.005,+002.015,0.8373000.005,+002.027,0.8353000.005,+002.060,0.8358000.005,+002.062,0.8221000.005,+002.115,0.8468000.005,+002.122,0.8446000.005,+003.100,0.8369000.005,+1281.000,0.812890.345,-900.976,0.7981-900.976,002.121,0.7649-900.976,910.400,0.7643-900.976,-900.906,0.9811002.121,+002.120,0.8838002.121,+002.122,0.8914002.121,+003.150,0.8573002.121,+005.000,0.8094910.400,+002.016,0.6957-900.975,891.850,0.7991-900.975,003.111,0.7669-900.975,002.009,0.7359-900.975,000.004,0.7222-900.975,+101.005,0.7447891.850,+000.007,0.7073891.850,+002.006.A,0.6613891.850,+002.627,0.7671891.850,+002.640,0.7297891.850,+003.111,0.722003.111,-900.912,0.7652003.111,+002.026,0.8524003.111,+002.034,0.8431003.111,+002.035,0.8507003.111,+003.111.A,0.8914002.009,+000.004,0.8446002.009,+001.099.A,0.8597002.009,+002.009.A,0.8742002.009,+002.010,0.8368002.009,+002.011,0.8288002.009,+002.018,0.8809002.009,+002.036,0.8647002.009,+002.038,0.8842002.009,+003.116,0.8553002.009,+101.000,0.7898002.009,+101.006,0.847000.004,-900.906,0.7109000.004,+001.086.A,0.8566000.004,+002.012,0.8092000.004,+002.029,0.8371000.004,+002.036,0.8355000.004,+002.640,0.8545000.004,+005.000,0.8788000.004,+101.005,0.8675-900.974,002.100,0.7608-900.974,-900.950,0.9353-900.974,817.000,0.7624-900.974,+001.113,0.7735002.100,+001.091,0.8631002.100,+001.096,0.8658002.100,+001.099.A,0.8677002.100,+001.107,0.8719002.100,+002.021,0.8304002.100,+002.101,0.8749002.100,+002.110,0.869002.100,+002.509,0.8843002.100,+004.204,0.8569002.100,+004.209,0.8723002.100,+004.211,0.8679002.100,+101.003,0.8632817.000,+001.080,0.8348817.000,+001.093,0.8454002.115,+000.005,0.8117002.115,+001.016,0.851002.115,+002.820,0.8445-900.962,003.112.A,0.7736-900.962,891.500,0.7968003.112.A,+003.112,0.8187891.500,+001.086.B,0.8032891.500,+001.113.B,0.8342891.500,+002.010,0.7222891.500,+003.100,0.7666891.500,+003.111.A,0.7802-900.959,900.956,0.8817-900.959,005.00A,0.6604-900.959,002.120,0.7375005.00A,-900.958,0.6687005.00A,-900.914,0.6697005.00A,-900.913,0.675005.00A,-900.908,0.6823005.00A,-900.906,0.6858005.00A,-900.905,0.6941005.00A,+000.007,0.7525005.00A,+002.002,0.7277005.00A,+002.004,0.743005.00A,+002.009,0.794005.00A,+002.010,0.749005.00A,+002.016,0.7638005.00A,+002.018,0.783005.00A,+002.037,0.7741005.00A,+002.120,0.7893005.00A,+002.121,0.784005.00A,+002.601,0.791005.00A,+002.822,0.7684005.00A,+002.850,0.8231005.00A,+003.160,0.7755005.00A,+003.175,0.8068005.00A,+003.352,0.7671005.00A,+003.402,0.7723005.00A,+101.007,0.784005.00A,+8000.001,0.7944002.120,-900.909,0.7471002.120,-900.906,0.756002.120,+002.121,0.8963-900.958,891.520,0.7997-900.956,900.959,0.8954-900.954,002.023,0.705-900.954,+001.110,0.7398-900.954,+002.023,0.6508002.023,+001.111,0.8164-900.951,895.150,0.7691-900.914,001.025,0.7337-900.914,890.331,0.8055-900.914,900.968,0.8747-900.914,002.037,0.7297-900.914,+002.064,0.6791001.025,+001.300,0.869001.025,+005.061,0.8486900.968,+002.002.A,0.6425900.968,+004.207,0.7708002.037,-900.913,0.7377002.037,+002.038,0.9209-900.913,002.029,0.7544-900.913,003.300,0.7269002.029,+000.004,0.8224002.029,+002.006,0.8147002.029,+002.037,0.8778003.300,+002.037,0.8637003.300,+003.350,0.9203003.300,+004.213,0.8979-900.912,002.035,0.7279-900.912,002.030,0.7255002.030,+002.035,0.9063002.030,+002.036,0.8995002.030,+002.037,0.9076002.030,+002.038,0.9186002.030,+005.051,0.886-900.911,002.618,0.7686-900.911,900.975,0.8564-900.911,410.525,0.7934002.618,+000.007,0.8053002.618,+001.105,0.7955002.618,+002.016,0.8219002.618,+002.614,0.8844002.618,+002.627,0.9032002.618,+002.715,0.8861002.618,+470.750,0.7791900.975,+000.004,0.7596900.975,+002.001,0.7436900.975,+002.006.A,0.7045-900.909,900.908,0.8872-900.909,002.006.A,0.6709002.006.A,+002.034,0.8541002.006.A,+002.035,0.857-900.907,890.100,0.8244-900.907,890.101,0.8101-900.907,890.106,0.8123-900.907,002.601,0.767-900.907,002.007,0.6982-900.907,891.800,0.8112890.100,+002.507,0.8023002.601,+000.005,0.8249002.601,+000.007,0.8355002.601,+001.082.A,0.8534002.601,+002.002.B,0.7516002.601,+002.007,0.823002.601,+002.016,0.8406002.601,+002.060,0.833002.601,+002.613,0.8889002.601,+002.820,0.8586002.601,+002.822,0.8712002.601,+002.990,0.8357002.601,+005.00A,0.8139002.601,+101.008,0.8658002.601,+470.750,0.8093002.601,+896.950,0.8628002.601,+1281.000,0.7816002.007,+001.113.C,0.8396-900.905,001.070,0.7344-900.895,816.500,0.7748-900.895,760.800,0.7308760.800,-900.885,0.7476760.800,+002.101,0.7262760.800,+002.821,0.7321-900.885,890.150,0.7931-900.875,002.016,0.6919-900.875,001.087,0.7665-900.875,190.200,0.7262-900.875,150.128,0.7314002.016,+001.087,0.8898002.016,+001.087.A,0.8835002.016,+001.099.A,0.8729001.087,+001.087.A,0.9125001.087,+001.087.C,0.8847001.087,+002.016,0.829190.200,+001.088,0.691190.200,+002.023,0.612190.200,+002.400,0.6506190.200,+002.401,0.6661190.200,+002.615.A,0.6639190.200,+002.615.B,0.6748190.200,+004.208,0.72348000.000,+003.350,0.81568000.000,+004.208,0.77698000.000,+5000.000,0.90068000.000,+6000.000,0.98000.000,+8000.001,0.8668-900.735,002.501,0.7522-900.735,900.981,0.8594002.501,+002.502,0.8521900.981,+002.006,0.7182900.981,+002.021,0.7485900.981,+002.022,0.7252900.981,+101.007,0.8027900.981,+1350.200,0.8398-900.730,890.310,0.7821-900.730,890.350,0.7763-900.730,-900.729,0.9388-900.730,+1300.100,0.7944-900.729,470.200,0.7041-900.729,+001.088,0.7529470.200,+001.001,0.7403-900.320,004.207,0.7249004.207,+005.051,0.8265-900.180,003.175,0.7401-900.180,+003.175,0.7271-900.170,002.031,0.6538-900.170,004.510,0.6813-900.170,880.551,0.7692-900.170,+002.031,0.5774-900.170,+006.805,0.6059002.031,+002.032,0.8904004.510,+001.107,0.8276880.551,+004.500,0.679880.551,+006.805,0.7025880.551,+006.806,0.6674880.551,+006.999,0.6427-001.022,819.300,0.6997-001.022,900.510,0.7328900.510,+001.024,0.7644900.510,+002.626,0.7724900.510,+005.056,0.7228+000.000A,000.000,0.855+000.000A,002.053,0.7948+000.000A,1270.000,0.7768+000.000A,1285.001,0.7533+000.000A,002.067,0.7757+000.000A,002.068,0.7555000.000,+000.001,0.8696000.000,+000.003,0.8393000.000,+002.301,0.787002.053,+002.067,0.90521270.000,+002.019,0.75351270.000,+002.033,0.73371270.000,+002.067,0.77981270.000,+1285.001,0.79861285.001,+1285.000,0.8406002.068,+002.069,0.9151+000.000.B,000.000.A,0.8935+000.000.B,1271.000,0.75741271.000,+002.019,0.7812+000.001,165.100,0.6799+000.001,850.200,0.7516+000.001,002.615,0.7823165.100,+002.017,0.6405165.100,+002.990,0.6428165.100,+004.210,0.7199165.100,+1271.000,0.6804165.100,+1283.000,0.6428165.100,∴,0.5784850.200,+001.111,0.7645850.200,+002.017,0.693850.200,∴,0.6584002.615,+002.615.A,0.8968002.615,+002.615.B,0.8694002.615,+002.616,0.9089002.615,+004.204,0.8567002.615,+004.211,0.8663+000.003,001.020,0.8258+000.003,002.001,0.855+000.003,003.302,0.7658001.020,+001.996,0.9034002.001,+000.007,0.8693002.001,+001.082,0.9034002.001,+001.106,0.8787002.001,+001.118,0.888002.001,+001.200,0.8872002.001,+001.201,0.9015002.001,+001.205,0.879002.001,+002.002,0.8166002.001,+002.003,0.8323002.001,+002.005,0.8504002.001,+002.007,0.8417002.001,+002.009,0.8643002.001,+002.024,0.86002.001,+002.029,0.8783002.001,+002.036,0.8599002.001,+002.046,0.8559002.001,+002.508,0.8855002.001,+002.625,0.873002.001,+002.626,0.871002.001,+004.213,0.8848002.001,+7000.000,0.8279+000.004,003.401,0.8389+000.004,005.058,0.8365+000.004,890.950,0.7185003.401,+002.018,0.8469003.401,+003.116,0.8606003.401,+005.000,0.8156003.401,+101.000,0.8172005.058,+003.300,0.8439890.950,+001.081,0.7714890.950,+005.00E,0.6773+000.005,875.225,0.7014+000.007,000.001,0.8709000.001,[UNADDRESSABLE],0.5369000.001,∴,0.6368+000.00i,001.001,0.7331+000.00i,875.100,0.7336+000.00i,006.805,0.7526+000.00i,-0.001,0.7308+000.00i,002.611,0.7661001.001,[UNADDRESSABLE],0.5138875.100,+001.114,0.8233002.611,+002.612,0.8924[UNADDRESSABLE],760.812,0.5159[UNADDRESSABLE],002.610,0.5453160.300,+001.004,0.7023160.300,+002.023,0.6831760.812,+002.008,0.7293002.610,+101.005,0.8671002.610,+1285.000,0.8064+000.010,004.300,0.8574+000.010,004.302,0.7409+000.010,004.310,0.8354+000.010,001.019,0.8245+001.001,875.500,0.7408+001.002,801.010,0.8472+001.002,880.300,0.7289+001.002,760.813,0.7295+001.003,920.100,0.7854+001.003,875.115,0.7083875.115,+002.121,0.7399875.115,+8000.001,0.7541+001.004,130.200,0.6666+001.004,800.500,0.7285+001.004,1400.100,0.7378+001.005,810.100,0.8063+001.008,820.100,0.7343+001.008,160.100,0.7386+001.008,470.600,0.7154160.100,+1285.001,0.7287+001.011,930.100,0.7919+001.013,875.000,0.7745+001.013,002.825,0.8584875.000,+001.014,0.78875.000,+001.016,0.7739875.000,+001.082.B,0.7828002.825,+001.205.A,0.8388+001.015,900.100,0.785+001.016,001.035,0.9087+001.016,001.995,0.8693+001.016,899.100,0.7748001.035,+001.105,0.879001.035,+001.995,0.9311001.035,+001.996,0.9191001.035,+003.001,0.8611001.035,+004.212,0.845001.035,+1283.000,0.8007001.995,+001.035,0.8864001.995,+001.099.A,0.8382001.995,+002.502,0.8063+001.017,990.100,0.8564+001.019,000.010,0.8623+001.024,900.500,0.7531+001.026,800.100,0.7692+001.027,835.300,0.7682+001.028,001.031,0.9156+001.028,001.029,0.9256+001.028,820.200,0.7173001.031,+001.100,0.8781001.031,+001.101,0.8982001.029,+002.002.B,0.6963+001.029,840.100,0.7589+001.031,001.028,0.8921+001.031,875.300,0.7593001.028,+001.100,0.8624001.028,+001.103,0.8865001.028,+001.996,0.908+001.032,003.200,0.8613003.200,+002.003,0.8263003.200,+003.402,0.8725003.200,+005.056,0.8497+001.035,001.996,0.8839+001.035,805.100,0.7785+001.035,645.200,0.7712805.100,+002.700,0.7875645.200,+001.088,0.7688+001.050,001.051,0.8837+001.060,001.014,0.891001.014,+001.089,0.8946001.014,+001.092,0.9088+001.061,460.200,0.7316+001.070,878.200,0.7476+001.070,890.390,0.787+001.071,878.000,0.834+001.071,873.300,0.7986+001.075,812.500,0.8174+001.076,814.300,0.7797+001.077,814.410,0.784814.410,+002.715,0.7956+001.079,816.000,0.8433+001.081,896.000,0.8477+001.081,003.114,0.8514003.114,+003.110,0.8523003.114,+005.00E,0.7604+001.082,001.082.A,0.8819+001.082,001.082.B,0.8769+001.082,002.700,0.8753001.082.A,+001.082.T,0.899001.082.A,+001.107,0.8576001.082.A,+003.116,0.833001.082.B,+001.082.T,0.9123001.082.B,+001.206,0.8521002.700,+001.082.A,0.8753002.700,+001.082.B,0.8675002.700,+001.097,0.878002.700,+001.202,0.8714002.700,+002.710,0.884002.700,+003.402,0.8627+001.082.A,001.082,0.9068+001.082.A,002.110,0.8829001.082,+001.082.B,0.8991001.082,+001.082.T,0.8913002.110,+001.099.A,0.8793002.110,+002.100,0.8584002.110,+003.116,0.8624002.110,+004.209,0.8834002.110,+004.210,0.8966+001.082.B,002.830,0.8582002.830,+001.095,0.8727002.830,+001.104,0.8397+001.083,004.500,0.8552+001.083,006.806,0.8492004.500,+004.510,0.9062004.500,+1286.000,0.8405006.806,+002.009,0.8338+001.084,815.200,0.7806+001.084,893.000,0.8602+001.084,850.100,0.7736850.100,+006.804,0.7134+001.085,002.101,0.8757+001.085,004.213,0.8408002.101,+002.004,0.811002.101,+002.026,0.8614004.213,+002.001,0.7888004.213,+003.300,0.8118004.213,+7000.000,0.769+001.086,001.086.A,0.8856+001.086,001.086.B,0.886+001.086.A,001.086,0.9167+001.086.A,897.000,0.8473001.086,+001.086.B,0.8962001.086,+001.086.C,0.8866+001.086.B,814.000,0.8577+001.086.C,896.950,0.7337896.950,+470.750,0.784896.950,+1300.100,0.7713+001.087,001.087.A,0.8856+001.087,001.087.B,0.8888001.087.A,+001.087.B,0.9054001.087.B,+001.087.A,0.9365001.087.B,+001.087.B1,0.9222001.087.B,+001.087.B2,0.8764001.087.B,+001.087.B3,0.8776001.087.B,+001.087.B4,0.8825001.087.B,+001.087.B5,0.8508+001.087.B,875.200,0.7794+001.087.B,891.700,0.8149+001.087.B,001.087.B1,0.9011+001.087.B,001.087.B2,0.9044+001.087.B,001.087.B3,0.9153+001.087.B,001.087.B4,0.9086+001.087.B,001.087.B5,0.8905891.700,+001.099,0.807891.700,+002.507,0.7979+001.087.C,101.000,0.8113101.000,+001.106,0.8697101.000,+001.110,0.8618101.000,+002.034,0.7531101.000,+002.035,0.7692101.000,+002.036,0.7628101.000,+002.038,0.7791101.000,+002.627,0.8156101.000,+101.002,0.8447101.000,+101.005,0.8598101.000,+101.006,0.8443101.000,+101.008,0.8586+001.088,001.016,0.9122+001.088,900.876,0.8062001.016,+001.098,0.9167001.016,+001.105,0.8736001.016,+001.111,0.8762001.016,+001.995,0.9088001.016,+002.053,0.8082001.016,+002.115,0.8547001.016,+002.626,0.8602900.876,+002.615.B,0.7819+001.089,001.096,0.925+001.089,001.091,0.9069+001.089,001.092,0.9063+001.089,001.060,0.9012001.060,+001.093,0.9009001.060,+001.205.A,0.863+001.090,845.000,0.8265+001.090,002.994,0.8366845.000,∴,0.6426002.994,+004.201,0.8825002.994,+004.210,0.8812+001.091,001.089,0.8939+001.091,002.005,0.8559001.089,+001.092,0.8936001.089,+001.093,0.8939001.089,+001.096,0.9009001.089,+001.097,0.9051001.089,+001.098,0.9193001.089,+001.099,0.9241002.005,+001.104,0.8033002.005,+001.114,0.8098002.005,+001.206,0.8274002.005,+002.022,0.8697002.005,+002.038,0.886002.005,+002.300,0.8757002.005,+002.301,0.8769002.005,+002.626,0.8829002.005,+004.510,0.8907002.005,+005.056,0.8868002.005,+1281.000,0.8177002.005,+1286.000,0.8277+001.092,900.750,0.7664900.750,+002.615.A,0.7412900.750,+002.853,0.7284+001.094,003.113,0.876+001.094,001.013,0.9171+001.094,001.081,0.9214003.113,+003.110,0.8704003.113,+9000.000,0.7929001.013,+002.825,0.8544001.081,+001.113.B,0.8789001.081,+002.020,0.8226+001.095,002.820,0.8637002.820,+001.205,0.8784002.820,+002.007,0.8132002.820,+002.009.A,0.8391002.820,+002.115,0.8736002.820,+003.100,0.8366+001.096,900.870,0.751+001.096,900.995,0.8191900.870,+002.509,0.7499+001.097,891.730,0.796+001.097,835.150,0.7603835.150,+1350.200,0.8291+001.098,890.317,0.8168890.317,+002.700,0.7895+001.100,002.630,0.8049+001.101,875.120,0.8189+001.102,640.200,0.7699+001.103,001.032,0.8966+001.104,875.245,0.8197875.245,+002.830,0.7497+001.105,1180.500,0.8+001.106,190.100,0.8077190.100,+002.990,0.645+001.107,001.094,0.8832+001.108,191.000,0.8437+001.108,192.000,0.8453+001.108,881.000,0.8525+001.108,001.040,0.8979001.040,+002.005,0.8162001.040,+002.009,0.8304001.040,+002.012,0.8128001.040,+006.999,0.8297001.040,+101.008,0.8543001.040,+1282.000,0.7972+001.111,828.000,0.8192828.000,+004.203,0.8531+001.112,890.800,0.8254+001.113,002.011,0.8432+001.113,001.113.A,0.8506+001.113,001.113.B,0.8653+001.113,001.113.C,0.8539002.011,+002.012,0.8852002.011,+002.060,0.8781+001.113.A,001.113,0.8667001.113,+001.113.B,0.864001.113,+001.113.C,0.8492+001.114,002.014,0.8296002.014,+002.018,0.9102+001.118,002.625,0.8665+001.118,002.626,0.8025+001.118,1.0,0.7422002.625,+002.626,0.89421.0,+002.046,0.67351.0,+002.053,0.67521.0,+002.058,0.68611.0,+002.062,0.67411.0,+002.063,0.67491.0,+006.999,0.65461.0,∴,0.6145+001.201,001.200,0.8984001.200,+001.205,0.8899001.200,+002.800,0.8037001.200,+002.820,0.7917+001.205,800.345,0.8579+001.205.A,001.205,0.868+001.205.A,001.093,0.8565001.205,+001.206,0.8903+001.300,900.610,0.7954+001.995,899.120,0.7943+001.996,001.026,0.9179+001.996,001.027,0.9204+001.996,001.100,0.8657+001.996,900.050,0.8243+001.996,805.000,0.8405001.100,+002.640,0.7538805.000,+002.700,0.8694+002.001,002.210,0.8221+002.001,800.250,0.7173+002.001,460.305,0.6344+002.001,190.310,0.6287002.210,+002.211,0.877002.210,+002.214,0.8713002.210,+006.805,0.828460.305,+002.625,0.6755190.310,+002.009,0.625+002.002,800.203,0.6011+002.002,470.700,0.6275+002.002,002.002.B,0.8677470.700,+002.601,0.7439+002.002.A,890.330,0.6725+002.002.A,890.700,0.7027+002.002.B,900.210,0.6013900.210,+002.024,0.6764900.210,+002.508,0.7599+002.003,801.001,0.7633+002.004,002.003,0.9104002.003,+002.005,0.9155002.003,+002.008,0.919+002.005,865.000,0.7752+002.005,002.301,0.8233865.000,+002.990,0.7867002.301,+002.300,0.8593002.301,+003.402,0.8716002.301,+005.00A,0.8097002.301,+640.500,0.8161+002.006,835.205,0.6427+002.006,900.885,0.7138835.205,+002.034,0.6824+002.008,860.539,0.7002+002.008,860.540,0.7454+002.008,500.770,0.6732+002.008,101.002,0.7908+002.009,002.008,0.8999+002.009,003.116,0.8438002.008,+002.014,0.8664002.008,+002.018,0.8925002.008,+101.002,0.8395002.008,+101.003,0.8442+002.009.A,003.001,0.8604+002.009.A,875.250,0.6945003.001,+003.301,0.8746003.001,+101.006,0.8438875.250,+002.852,0.729+002.010,000.003,0.8151000.003,+002.011,0.8031000.003,+005.00A,0.8433+002.013,002.012,0.9043+002.013,800.325,0.6814+002.013,875.210,0.6704002.012,+002.034,0.9032002.012,+002.051,0.8955800.325,+002.825,0.7505+002.014,101.003,0.793+002.015,002.013,0.9063+002.017,003.005,0.8669+002.017,819.005,0.7987819.005,+003.005,0.7859+002.020,896.600,0.7144+002.020,410.535,0.6475+002.022,150.145,0.5924+002.023,001.111,0.7454+002.024,005.00E,0.7867005.00E,+002.032,0.7691005.00E,+002.507,0.7975005.00E,+003.115,0.7999+002.025,002.024,0.9118+002.025,1351.000,0.77+002.025,-900.210,0.623+002.025,890.395,0.73121351.000,+002.027,0.7717-900.210,+1351.000,0.7046890.395,+1351.000,0.7896+002.026,001.105,0.7129+002.026,000.007,0.8308001.105,+004.212,0.7555001.105,+1280.000,0.6885000.007,+003.112.A,0.8352000.007,+470.750,0.8761000.007,+9000.000,0.8776+002.028,150.182,0.6577+002.030,002.025,0.8611+002.030,002.617,0.8189+002.030,-900.200,0.6348002.025,+1351.000,0.8528002.617,+002.037,0.8574+002.033,898.600,0.7094+002.033,002.801,0.8572898.600,+002.508,0.7873002.801,+002.800,0.8784002.801,+003.301,0.8532002.801,+8000.000,0.8183+002.034,003.111.A,0.7995+002.034,003.403,0.8413+002.034,892.100,0.7371003.111.A,+003.112.A,0.8958+002.035,900.912,0.7539+002.035,002.027,0.8993002.027,+005.051,0.8756+002.036,001.004,0.8466001.004,+896.950,0.8216+002.037,900.913,0.7577+002.037,410.515,0.6892900.913,+002.038,0.7726+002.038,002.022,0.9105+002.049,002.058,0.9064+002.053,000.000A,0.7798+002.053,002.122,0.8383000.000A,+002.067,0.7837000.000A,+002.068,0.7803+002.058,002.049,0.8918+002.068,002.069,0.9104+002.100,004.204,0.8184004.204,+002.101,0.8372004.204,+002.615,0.8697004.204,+004.211,0.8842+002.101,900.420,0.7449+002.120,003.150,0.8817+002.120,890.315,0.7788+002.120,005.056,0.8585003.150,+002.121,0.8799003.150,+002.507,0.8847005.056,+003.200,0.8586+002.121,900.160,0.7562+002.121,890.316,0.7907+002.121,910.300,0.7645+002.121,890.380,0.7768890.316,+002.122,0.7904910.300,+002.507,0.7655+002.122,150.305,0.7109+002.214,002.211,0.8809+002.214,002.213,0.8713+002.214,460.100,0.7647+002.214,890.953,0.7659+002.300,002.303,0.8706002.303,+002.302,0.8761002.303,+640.500,0.8315+002.301,002.300,0.8905002.300,+002.302,0.8803002.300,+002.303,0.8636002.300,+640.500,0.8552+002.303,640.100,0.6524640.100,+640.500,0.8084+002.401,003.402,0.8948+002.410,990.997,0.7801+002.412,002.411,0.8982+002.421,818.100,0.7728+002.425,873.200,0.8151+002.500,900.900,0.7487900.900,+002.501,0.7484+002.501,002.500,0.9022002.500,+004.202,0.8855+002.502,001.201,0.7737001.201,+002.821,0.7916001.201,+1283.000,0.7329+002.505,828.300,0.7689+002.507,892.600,0.7966+002.508,410.530,0.7206410.530,+002.720,0.6496+002.509,200.000,0.7345+002.601,002.600,0.8742+002.601,900.970,0.8178+002.601,002.060,0.8856900.970,+005.00A,0.77+002.612,1400.000,0.72871400.000,+101.006,0.7497+002.613,760.810,0.7794+002.613,830.200,0.7882+002.614,900.350,0.726+002.614,828.500,0.7899+002.615,160.400,0.7146+002.615,002.616,0.9104+002.615,002.615.A,0.8764002.616,+1285.000,0.8054+002.615.A,900.877,0.7904+002.619,900.150,0.7493+002.619,410.520,0.7043900.150,+002.620,0.7555900.150,+003.170,0.7783410.520,+002.801,0.6321410.520,+1280.000,0.6472+002.620,900.940,0.8011+002.625,001.118,0.7817001.118,+002.626,0.798001.118,∴+1.0,0.6127+002.627,900.911,0.7663+002.640,875.150,0.7407+002.640,002.852,0.8401+002.710,825.100,0.7583+002.710,825.200,0.7546+002.715,003.112,0.8858+002.715,900.360,0.7818003.112,+002.720,0.8515003.112,+003.112.A,0.8768003.112,+003.116,0.8951+002.801,002.800,0.8447+002.830,875.280,0.7469+002.851,190.450,0.6574190.450,+006.805,0.6392+002.852,003.400,0.8674+002.852,875.260,0.7496+002.852,002.640,0.8622003.400,+006.805,0.8754+002.994,004.201,0.8474+002.994,1400.200,0.6745+003.001,003.301,0.8602+003.001,101.006,0.7805003.301,+003.302,0.8703003.301,+8000.000,0.805+003.005,002.017,0.8583+003.111,003.110,0.8633003.110,+003.113,0.87003.110,+003.114,0.869003.110,+003.170,0.8835+003.111.A,003.410,0.8276+003.112.A,900.962,0.7644+003.115,890.275,0.7688+003.115,900.620,0.7675+003.115,890.260,0.7894+003.150,890.387,0.7876+003.302,999.001,0.7617+003.351,003.350,0.8991+003.351,5000.000,0.733003.350,+003.352,0.8848003.350,+8000.000,0.8442+003.352,8000.001,0.8066+003.402,002.401,0.8841+003.403,005.xxx,0.7956+003.410,970.100,0.833+004.206,900.952,0.7768+004.206,005.061,0.8873900.952,+005.061,0.772+004.207,900.320,0.8001+004.208,006.800,0.8793+004.208,900.310,0.7988006.800,+006.811,0.88+004.210,848.000,0.8484+004.211,190.205,0.6596+004.212,160.xxx,0.6403+004.213,001.085,0.8565+004.500,001.083,0.8277001.083,+004.510,0.8534+004.510,001.107,0.764+005.051,001.023,0.837+005.051,900.978,0.6079+005.054,860.xxx,0.6664+005.056,891.550,0.7128+005.056,875.110,0.691+005.056,880.550,0.673+005.061,880.310,0.7016+006.805,002.410,0.8377+006.810,001.084,0.8559+006.810,891.900,0.7593+101.000,101.008,0.7887+101.003,900.850,0.7371+101.007,460.295,0.7124+101.008,1286.000,0.83441286.000,∴,0.6296+896.950,1300.100,0.7856+896.950,470.750,0.7939+1271.000,002.019,0.8357+1280.000,150.151,0.6257150.151,+1281.000,0.6178+1281.000,1280.000,0.8283+1282.000,1281.000,0.8673+1283.000,1282.000,0.8755+1285.001,1285.000,0.8525+1400.200,001.090,0.8332001.090,∴,0.5573+5000.000,003.351,0.7608+8000.001,003.352,0.8504+9000.000,896.740,0.728+9000.000,760.801,0.7155∴,645.100,0.5397 "
    
    engine.run_autopoietic_protocol(seed_prompt, max_iterations=10)

if __name__ == "__main__":
    main()